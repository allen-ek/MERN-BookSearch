[{"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\index.js":"1","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\App.js":"2","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\pages\\SearchBooks.js":"3","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\pages\\SavedBooks.js":"4","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\components\\Navbar.js":"5","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\components\\SignupForm.js":"6","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\auth.js":"8","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\queries.js":"9","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\localStorage.js":"10","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\mutations.js":"11"},{"size":266,"mtime":1670519066264,"results":"12","hashOfConfig":"13"},{"size":1182,"mtime":1670556280719,"results":"14","hashOfConfig":"13"},{"size":4862,"mtime":1670555898252,"results":"15","hashOfConfig":"13"},{"size":2180,"mtime":1670555456601,"results":"16","hashOfConfig":"13"},{"size":2524,"mtime":1670519066263,"results":"17","hashOfConfig":"13"},{"size":3408,"mtime":1670558331004,"results":"18","hashOfConfig":"13"},{"size":2908,"mtime":1670548314921,"results":"19","hashOfConfig":"13"},{"size":1234,"mtime":1670519066267,"results":"20","hashOfConfig":"13"},{"size":282,"mtime":1670556896553,"results":"21","hashOfConfig":"13"},{"size":793,"mtime":1670519066267,"results":"22","hashOfConfig":"13"},{"size":1295,"mtime":1670559920004,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1c4w1ve",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\index.js",[],["49","50"],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\App.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\pages\\SearchBooks.js",["51"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\n//import { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  //empowers client to use graphql mutation\n  const [saveBook] = useMutation(SAVE_BOOK);\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      );\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { newBook: { ...bookToSave } },\n      });\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\pages\\SavedBooks.js",["52","53"],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n//import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { GET_ME } from '../utils/queries';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  \n  const userData = data?.me || {};\n  const handleDeleteBook = async (bookId) => {\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n  if (!token) {\n    return false;\n  }\n\n  try {\n    const res = await removeBook({\n      variables: { bookId },\n    });\n    removeBookId(bookId);\n  } catch (err) {\n    console.error(err);\n  }\n};\n// if data isn't here yet, say so\nif (loading) {\n  return <h2>LOADING...</h2>;\n}\n  \n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\components\\Navbar.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\auth.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\queries.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\allen\\bootcamp\\Modules\\MERN-BookSearch\\client\\src\\utils\\mutations.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":74,"column":15,"nodeType":"60","messageId":"61","endLine":74,"endColumn":19},{"ruleId":"58","severity":1,"message":"62","line":13,"column":24,"nodeType":"60","messageId":"61","endLine":13,"endColumn":29},{"ruleId":"58","severity":1,"message":"63","line":23,"column":11,"nodeType":"60","messageId":"61","endLine":23,"endColumn":14},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]